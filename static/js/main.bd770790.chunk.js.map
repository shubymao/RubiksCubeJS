{"version":3,"sources":["lib/RoundedBoxGeometry.js","lib/Sticker.ts","lib/RoundedPlaneGeometry.js","lib/block.ts","lib/cube.ts","lib/control.ts","lib/game.ts","components/ThreeWrapper.tsx","App.tsx","index.js"],"names":["RoundedBoxGeometry","size","radius","radiusSegments","width","height","depth","THREE","call","this","type","isNaN","Math","max","floor","edgeHalfWidth","min","edgeHalfHeight","edgeHalfDepth","parameters","rs1","totalVertexCount","positions","Float32Array","normals","cornerVerts","cornerNormals","vertex","vertexPool","normalPool","indices","lastVertex","cornerVertNumber","cornerLayout","j","push","PIhalf","PI","cornerOffset","y","vert","va","cosVa","cos","sinVa","sin","x","ha","z","clone","multiplyScalar","add","norm","normalize","set","i","length","multiply","doVertices","a","b","c","d","doFaces","flips","lastRowOffset","v","r1","r2","u","u1","doCorners","cOffset","cRowOffset","needsFlip","doHeightEdges","end","cStarts","cEnds","cStart","cEnd","doWidthEdges","urs1","u1rs1","doDepthEdges","index","setXYZ","setIndex","Uint16Array","addAttribute","prototype","Object","create","constructor","Sticker","side","offset","color","plane","material","sticker","shape","moveTo","lineTo","quadraticCurveTo","bevelEnabled","curveSegments","RoundedPlaneGeometry","MeshLambertMaterial","DoubleSide","Mesh","rotateX","position","rotateY","dispose","Block","n","object","Object3D","stickers","Array","core","mat","block","userData","parent","getsticker","remove","undefined","clean","xaxis","Vector3","yaxis","zaxis","Cube","game","p","group","cur","blocks","moves","scramble","turning","lastmove","getrandommove","raxis","clockwise","count","speed","sspeed","initcube","initspeed","k","getblock","animate","finalize_animate","next","turn","axis","rotateOnAxis","children","updateMatrix","matrix","applyMatrix","state","finalize_rotate","face","getface","putface","rotateface","finalize_turn","fmove","random","res","temp","w","l","still","moving","finalize","invisibleMaterial","MeshBasicMaterial","depthWrite","transparent","opacity","Control","raycaster","Raycaster","surface","PlaneBufferGeometry","perimeter","BoxBufferGeometry","xoffset","yoffset","touch","blockarray","piece","layer","Vector2","dragcurrent","dragdelta","dragtotal","momentum","flipaxis","flipangle","dragdirection","rotateaxis","dragnormal","segment","fliplayer","start","e","TouchEvent","preventDefault","getposition","initdrag","canvas","addEventListener","move","onDragMove","onDragEnd","removeEventListener","getmomentum","getComponent","flip","abs","delta","roundAngle","sign","angle","ind","round","cube","animations","scene","getarr","intersection","getintersect","normal","attach","rotation","lookAt","translateZ","updateMatrixWorld","detach","getpiece","surfaceintersect","worldToLocal","point","sub","setZ","addmomentumpoint","getmainaxis","direction","setComponent","worlddirection","localToWorld","objectdirection","cross","negate","getlayer","selectlayer","forEach","setFromVector3","snaprotation","toVector3","deselectlayer","pop","ev","touches","changedTouches","pageX","pageY","setFromCamera","convertposition","camera","intersectObject","objects","intersectObjects","vector","child","Matrix4","getInverse","matrixWorld","movepiece","from","to","arr","ar","time","Date","now","filter","moment","points","t","value","pt","Game","control","frameId","renderer","PerspectiveCamera","arrowkey","Map","key","keypress","has","code","op","get","rotate","ax","shiftKey","shuffle","Scene","WebGLRenderer","antialias","initcanvas","createLight","initkeys","initcontrol","requestAnimationFrame","cancelAnimationFrame","scramble_cube","update","renderScene","window","bind","setClearColor","setSize","fov","updateProjectionMatrix","domElement","tabIndex","lights","holder","ambient","AmbientLight","front","DirectionalLight","back","charAt","getcube","render","updateoffset","reset","ThreeWrapper","props","mount","createRef","current","appendChild","offsetLeft","offsetTop","stop","style","ref","Component","App","innerWidth","className","href","onClick","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.bd770790.chunk.js","sourcesContent":["import * as THREE from 'three';\nfunction RoundedBoxGeometry(size, radius, radiusSegments) {\n  THREE.BufferGeometry.call(this);\n\n  this.type = 'RoundedBoxGeometry';\n\n  radiusSegments = !isNaN(radiusSegments) ? Math.max(1, Math.floor(radiusSegments)) : 1;\n\n  var width, height, depth;\n\n  width = height = depth = size;\n  radius = size * radius;\n\n  radius = Math.min(radius, Math.min(width, Math.min(height, Math.min(depth))) / 2);\n\n  var edgeHalfWidth = width / 2 - radius;\n  var edgeHalfHeight = height / 2 - radius;\n  var edgeHalfDepth = depth / 2 - radius;\n\n  this.parameters = {\n    width: width,\n    height: height,\n    depth: depth,\n    radius: radius,\n    radiusSegments: radiusSegments,\n  };\n\n  var rs1 = radiusSegments + 1;\n  var totalVertexCount = (rs1 * radiusSegments + 1) << 3;\n\n  var positions = new THREE.BufferAttribute(new Float32Array(totalVertexCount * 3), 3);\n  var normals = new THREE.BufferAttribute(new Float32Array(totalVertexCount * 3), 3);\n\n  var cornerVerts = [],\n    cornerNormals = [],\n    vertex = new THREE.Vector3(),\n    vertexPool = [],\n    normalPool = [],\n    indices = [];\n  var lastVertex = rs1 * radiusSegments,\n    cornerVertNumber = rs1 * radiusSegments + 1;\n  doVertices();\n  doFaces();\n  doCorners();\n  doHeightEdges();\n  doWidthEdges();\n  doDepthEdges();\n\n  function doVertices() {\n    var cornerLayout = [\n      new THREE.Vector3(1, 1, 1),\n      new THREE.Vector3(1, 1, -1),\n      new THREE.Vector3(-1, 1, -1),\n      new THREE.Vector3(-1, 1, 1),\n      new THREE.Vector3(1, -1, 1),\n      new THREE.Vector3(1, -1, -1),\n      new THREE.Vector3(-1, -1, -1),\n      new THREE.Vector3(-1, -1, 1),\n    ];\n\n    for (var j = 0; j < 8; j++) {\n      cornerVerts.push([]);\n      cornerNormals.push([]);\n    }\n\n    var PIhalf = Math.PI / 2;\n    var cornerOffset = new THREE.Vector3(edgeHalfWidth, edgeHalfHeight, edgeHalfDepth);\n\n    for (var y = 0; y <= radiusSegments; y++) {\n      var v = y / radiusSegments;\n      var va = v * PIhalf;\n      var cosVa = Math.cos(va);\n      var sinVa = Math.sin(va);\n      var vert;\n      if (y === radiusSegments) {\n        vertex.set(0, 1, 0);\n        vert = vertex\n          .clone()\n          .multiplyScalar(radius)\n          .add(cornerOffset);\n        cornerVerts[0].push(vert);\n        vertexPool.push(vert);\n        var norm = vertex.clone();\n        cornerNormals[0].push(norm);\n        normalPool.push(norm);\n        continue;\n      }\n\n      for (var x = 0; x <= radiusSegments; x++) {\n        var u = x / radiusSegments;\n        var ha = u * PIhalf;\n        vertex.x = cosVa * Math.cos(ha);\n        vertex.y = sinVa;\n        vertex.z = cosVa * Math.sin(ha);\n\n        vert = vertex\n          .clone()\n          .multiplyScalar(radius)\n          .add(cornerOffset);\n        cornerVerts[0].push(vert);\n        vertexPool.push(vert);\n\n        norm = vertex.clone().normalize();\n        cornerNormals[0].push(norm);\n        normalPool.push(norm);\n      }\n    }\n\n    for (var i = 1; i < 8; i++) {\n      for (j = 0; j < cornerVerts[0].length; j++) {\n        vert = cornerVerts[0][j].clone().multiply(cornerLayout[i]);\n        cornerVerts[i].push(vert);\n        vertexPool.push(vert);\n\n        norm = cornerNormals[0][j].clone().multiply(cornerLayout[i]);\n        cornerNormals[i].push(norm);\n        normalPool.push(norm);\n      }\n    }\n  }\n\n  function doCorners() {\n    var flips = [true, false, true, false, false, true, false, true];\n    var lastRowOffset = rs1 * (radiusSegments - 1);\n    for (var i = 0; i < 8; i++) {\n      var cornerOffset = cornerVertNumber * i;\n      for (var v = 0; v < radiusSegments - 1; v++) {\n        var r1 = v * rs1;\n        var r2 = (v + 1) * rs1;\n        for (var u = 0; u < radiusSegments; u++) {\n          var u1 = u + 1;\n          var a = cornerOffset + r1 + u;\n          var b = cornerOffset + r1 + u1;\n          var c = cornerOffset + r2 + u;\n          var d = cornerOffset + r2 + u1;\n          if (!flips[i]) {\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n            indices.push(b);\n            indices.push(d);\n            indices.push(c);\n          } else {\n            indices.push(a);\n            indices.push(c);\n            indices.push(b);\n\n            indices.push(b);\n            indices.push(c);\n            indices.push(d);\n          }\n        }\n      }\n\n      for (u = 0; u < radiusSegments; u++) {\n        a = cornerOffset + lastRowOffset + u;\n        b = cornerOffset + lastRowOffset + u + 1;\n        c = cornerOffset + lastVertex;\n\n        if (!flips[i]) {\n          indices.push(a);\n          indices.push(b);\n          indices.push(c);\n        } else {\n          indices.push(a);\n          indices.push(c);\n          indices.push(b);\n        }\n      }\n    }\n  }\n\n  function doFaces() {\n    var a = lastVertex;\n    var b = lastVertex + cornerVertNumber;\n    var c = lastVertex + cornerVertNumber * 2;\n    var d = lastVertex + cornerVertNumber * 3;\n\n    indices.push(a);\n    indices.push(b);\n    indices.push(c);\n    indices.push(a);\n    indices.push(c);\n    indices.push(d);\n\n    a = lastVertex + cornerVertNumber * 4;\n    b = lastVertex + cornerVertNumber * 5;\n    c = lastVertex + cornerVertNumber * 6;\n    d = lastVertex + cornerVertNumber * 7;\n\n    indices.push(a);\n    indices.push(c);\n    indices.push(b);\n    indices.push(a);\n    indices.push(d);\n    indices.push(c);\n\n    a = 0;\n    b = cornerVertNumber;\n    c = cornerVertNumber * 4;\n    d = cornerVertNumber * 5;\n\n    indices.push(a);\n    indices.push(c);\n    indices.push(b);\n    indices.push(b);\n    indices.push(c);\n    indices.push(d);\n\n    a = cornerVertNumber * 2;\n    b = cornerVertNumber * 3;\n    c = cornerVertNumber * 6;\n    d = cornerVertNumber * 7;\n\n    indices.push(a);\n    indices.push(c);\n    indices.push(b);\n    indices.push(b);\n    indices.push(c);\n    indices.push(d);\n\n    a = radiusSegments;\n    b = radiusSegments + cornerVertNumber * 3;\n    c = radiusSegments + cornerVertNumber * 4;\n    d = radiusSegments + cornerVertNumber * 7;\n\n    indices.push(a);\n    indices.push(b);\n    indices.push(c);\n    indices.push(b);\n    indices.push(d);\n    indices.push(c);\n\n    a = radiusSegments + cornerVertNumber;\n    b = radiusSegments + cornerVertNumber * 2;\n    c = radiusSegments + cornerVertNumber * 5;\n    d = radiusSegments + cornerVertNumber * 6;\n\n    indices.push(a);\n    indices.push(c);\n    indices.push(b);\n    indices.push(b);\n    indices.push(c);\n    indices.push(d);\n  }\n\n  function doHeightEdges() {\n    for (var i = 0; i < 4; i++) {\n      var cOffset = i * cornerVertNumber;\n      var cRowOffset = 4 * cornerVertNumber + cOffset;\n      var needsFlip = i & 1;\n\n      for (var u = 0; u < radiusSegments; u++) {\n        var u1 = u + 1;\n        var a = cOffset + u;\n        var b = cOffset + u1;\n        var c = cRowOffset + u;\n        var d = cRowOffset + u1;\n\n        if (!needsFlip) {\n          indices.push(a);\n          indices.push(b);\n          indices.push(c);\n          indices.push(b);\n          indices.push(d);\n          indices.push(c);\n        } else {\n          indices.push(a);\n          indices.push(c);\n          indices.push(b);\n          indices.push(b);\n          indices.push(c);\n          indices.push(d);\n        }\n      }\n    }\n  }\n\n  function doDepthEdges() {\n    var cStarts = [0, 2, 4, 6];\n    var cEnds = [1, 3, 5, 7];\n\n    for (var i = 0; i < 4; i++) {\n      var cStart = cornerVertNumber * cStarts[i];\n      var cEnd = cornerVertNumber * cEnds[i];\n\n      var needsFlip = 1 >= i;\n\n      for (var u = 0; u < radiusSegments; u++) {\n        var urs1 = u * rs1;\n        var u1rs1 = (u + 1) * rs1;\n\n        var a = cStart + urs1;\n        var b = cStart + u1rs1;\n        var c = cEnd + urs1;\n        var d = cEnd + u1rs1;\n\n        if (needsFlip) {\n          indices.push(a);\n          indices.push(c);\n          indices.push(b);\n          indices.push(b);\n          indices.push(c);\n          indices.push(d);\n        } else {\n          indices.push(a);\n          indices.push(b);\n          indices.push(c);\n          indices.push(b);\n          indices.push(d);\n          indices.push(c);\n        }\n      }\n    }\n  }\n\n  function doWidthEdges() {\n    var end = radiusSegments - 1;\n\n    var cStarts = [0, 1, 4, 5];\n    var cEnds = [3, 2, 7, 6];\n    var needsFlip = [0, 1, 1, 0];\n\n    for (var i = 0; i < 4; i++) {\n      var cStart = cStarts[i] * cornerVertNumber;\n      var cEnd = cEnds[i] * cornerVertNumber;\n\n      for (var u = 0; u <= end; u++) {\n        var a = cStart + radiusSegments + u * rs1;\n        var b = cStart + (u !== end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\n\n        var c = cEnd + radiusSegments + u * rs1;\n        var d = cEnd + (u !== end ? radiusSegments + (u + 1) * rs1 : cornerVertNumber - 1);\n\n        if (!needsFlip[i]) {\n          indices.push(a);\n          indices.push(b);\n          indices.push(c);\n          indices.push(b);\n          indices.push(d);\n          indices.push(c);\n        } else {\n          indices.push(a);\n          indices.push(c);\n          indices.push(b);\n          indices.push(b);\n          indices.push(c);\n          indices.push(d);\n        }\n      }\n    }\n  }\n\n  var index = 0;\n\n  for (var i = 0; i < vertexPool.length; i++) {\n    positions.setXYZ(index, vertexPool[i].x, vertexPool[i].y, vertexPool[i].z);\n\n    normals.setXYZ(index, normalPool[i].x, normalPool[i].y, normalPool[i].z);\n\n    index++;\n  }\n\n  this.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n  this.addAttribute('position', positions);\n  this.addAttribute('normal', normals);\n}\n\nRoundedBoxGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\nRoundedBoxGeometry.constructor = RoundedBoxGeometry;\n\nexport { RoundedBoxGeometry };\n","import { RoundedPlaneGeometry } from './RoundedPlaneGeometry';\nimport { MeshLambertMaterial, ExtrudeBufferGeometry, Mesh, DoubleSide } from 'three';\nexport default class Sticker {\n  private plane: ExtrudeBufferGeometry;\n  private material: MeshLambertMaterial;\n  private sticker: Mesh;\n  public constructor(size: number, side: number, offset: number, color: string, depth: number) {\n    this.plane = RoundedPlaneGeometry(size, 0.15, depth);\n    this.material = new MeshLambertMaterial({ color: color, side: DoubleSide });\n    this.sticker = new Mesh(this.plane, this.material);\n    //top\n    if (side === 0) {\n      this.sticker.rotateX((-1 * Math.PI) / 2);\n      this.sticker.position.y += offset;\n    }\n    //bot\n    else if (side === 1) {\n      this.sticker.rotateX(Math.PI / 2);\n      this.sticker.position.y -= offset;\n    }\n    //left\n    else if (side === 2) {\n      this.sticker.rotateY((-1 * Math.PI) / 2);\n      this.sticker.position.x -= offset;\n    }\n    //right\n    else if (side === 3) {\n      this.sticker.rotateY(Math.PI / 2);\n      this.sticker.position.x += offset;\n    }\n    //front\n    else if (side === 4) {\n      this.sticker.position.z += offset;\n    }\n    //back\n    else if (side === 5) {\n      this.sticker.rotateY(Math.PI);\n      this.sticker.position.z -= offset;\n    }\n  }\n  public getsticker() {\n    return this.sticker;\n  }\n  public clean() {\n    this.plane.dispose();\n    this.material.dispose();\n  }\n}\n","import * as THREE from 'three';\nfunction RoundedPlaneGeometry(size, radius, depth) {\n  var x, y, width, height;\n\n  x = y = -size / 2;\n  width = height = size;\n  radius = size * radius;\n\n  const shape = new THREE.Shape();\n\n  shape.moveTo(x, y + radius);\n  shape.lineTo(x, y + height - radius);\n  shape.quadraticCurveTo(x, y + height, x + radius, y + height);\n  shape.lineTo(x + width - radius, y + height);\n  shape.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);\n  shape.lineTo(x + width, y + radius);\n  shape.quadraticCurveTo(x + width, y, x + width - radius, y);\n  shape.lineTo(x + radius, y);\n  shape.quadraticCurveTo(x, y, x, y + radius);\n\n  const geometry = new THREE.ExtrudeBufferGeometry(shape, {\n    depth: depth,\n    bevelEnabled: false,\n    curveSegments: 3,\n  });\n\n  return geometry;\n}\n\nexport { RoundedPlaneGeometry };\n","import { RoundedBoxGeometry } from './RoundedBoxGeometry';\nimport { MeshLambertMaterial, Mesh, Object3D } from 'three';\nimport Sticker from './Sticker';\nexport default class Block {\n  //primary object to pass down\n  public object = new Object3D();\n  public stickers: Sticker[] = new Array(6);\n  public core: any;\n  public mat: MeshLambertMaterial;\n  public block: Mesh;\n  //parameters\n  public constructor(x: number, y: number, z: number, n: number, size: number) {\n    let width = size * 0.72;\n    let offset = size * 0.5015;\n    let depth = size * 0.03;\n    this.core = new RoundedBoxGeometry(size, 0.12, 3); //make the shape\n    this.mat = new MeshLambertMaterial({ color: 0x000015 }); //make the material\n    this.block = new Mesh(this.core, this.mat); //combine together\n    this.block.userData.parent = this.object;\n    this.object.add(this.block); //add it to the output scene\n    //add sticker if it is close to the edge\n    if (y === 0) {\n      //bottom\n      this.stickers[0] = new Sticker(width, 1, offset, 'rgb(255, 255, 0)', depth);\n      this.object.add(this.stickers[0].getsticker());\n    }\n    if (y === n - 1) {\n      //top\n      this.stickers[1] = new Sticker(width, 0, offset, 'rgb(255, 255, 255)', depth);\n      this.object.add(this.stickers[1].getsticker());\n    }\n    if (x === 0) {\n      //left\n      this.stickers[2] = new Sticker(width, 2, offset, 'rgb(0, 255, 0)', depth);\n      this.object.add(this.stickers[2].getsticker());\n    }\n    if (x === n - 1) {\n      //right\n      this.stickers[3] = new Sticker(width, 3, offset, 'rgb(0, 0, 255)', depth);\n      this.object.add(this.stickers[3].getsticker());\n    }\n    if (z === 0) {\n      //back\n      this.stickers[4] = new Sticker(width, 5, offset, 'rgb(255, 140, 0)', depth);\n      this.object.add(this.stickers[4].getsticker());\n    }\n    if (z === n - 1) {\n      //front\n      this.stickers[5] = new Sticker(width, 4, offset, 'rgb(255, 0, 0)', depth);\n      this.object.add(this.stickers[5].getsticker());\n    }\n  }\n  public getblock(): Object3D {\n    return this.object;\n  }\n  public clean() {\n    this.object.remove(this.block);\n    for (let i = 0; i < 6; i++) {\n      if (this.stickers[i] !== undefined) {\n        this.object.remove(this.stickers[i].getsticker());\n        this.stickers[i].clean();\n      }\n    }\n    this.core.dispose();\n    this.mat.dispose();\n  }\n}\n","import * as p from 'three';\nimport Block from './block';\nimport { Vector3 } from 'three';\nimport Game from './game';\nconst xaxis = new Vector3(1, 0, 0).normalize();\nconst yaxis = new Vector3(0, 1, 0).normalize();\nconst zaxis = new Vector3(0, 0, 1).normalize();\nexport default class Cube {\n  //basic access to class\n  private game: Game;\n  private n: number;\n  //main cube object\n  public object = new p.Object3D();\n  private group = new p.Object3D();\n  private cur = 0;\n  //block array to keep orientation of the cube\n  public blocks: Block[][][];\n  //states to keep track of current status\n  private moves = 0;\n  private scramble = false;\n  private turning = false;\n  private lastmove = this.getrandommove();\n  private raxis: number = 0;\n  private clockwise: boolean = false;\n  //Speed elements\n  private count: number = 48;\n  private speed: number = Math.PI / this.count;\n  private sspeed: number = this.speed * 2; //scramble speed is double normal speed\n  public constructor(game: Game, n: number) {\n    this.game = game;\n    this.n = n;\n    this.blocks = new Array(this.n);\n    this.initcube();\n    this.initspeed();\n  }\n  private initcube() {\n    let n = this.n;\n    let offset = n * 0.5 - 0.5;\n    let size = 1 / n;\n    for (let i = 0; i < n; i++) {\n      this.blocks[i] = new Array(n);\n      for (let j = 0; j < n; j++) {\n        this.blocks[i][j] = new Array(n);\n        for (let k = 0; k < n; k++) {\n          let block = new Block(i, j, k, n, size);\n          let b = block.getblock();\n          this.object.add(b);\n          b.position.x = (i - offset) * size;\n          b.position.y = (j - offset) * size;\n          b.position.z = (k - offset) * size;\n          this.blocks[i][j][k] = block;\n        }\n      }\n    }\n  }\n  private initspeed() {\n    this.count = [200, 80, 72, 60, 48, 40][this.n - 1];\n    this.speed = Math.PI / this.count;\n    this.sspeed = this.speed * 2;\n  }\n  public getcube() {\n    return this.object;\n  }\n  public update() {\n    if (!this.turning) return;\n    this.animate(this.raxis);\n    this.cur += 1;\n    if (this.scramble) this.cur += 1;\n    if (this.cur === this.count / 2) {\n      this.finalize_animate();\n      if (this.scramble) {\n        if (this.moves === 0) this.scramble = false;\n        else {\n          this.moves--;\n          let next = this.getrandommove();\n          this.lastmove[2] = !this.lastmove[2];\n          while (next === this.lastmove) {\n            next = this.getrandommove();\n          }\n          this.turn(next[0], next[1], next[2]);\n        }\n      }\n    }\n  }\n\n  private animate(axis: number) {\n    let speed = this.scramble ? this.sspeed : this.speed;\n    switch (axis) {\n      case 0:\n        this.group.rotateOnAxis(xaxis, this.clockwise ? -1 * speed : speed);\n        break;\n      case 1:\n        this.group.rotateOnAxis(yaxis, this.clockwise ? -1 * speed : speed);\n        break;\n      case 2:\n        this.group.rotateOnAxis(zaxis, this.clockwise ? -1 * speed : speed);\n        break;\n      default:\n        break;\n    }\n  }\n  private finalize_animate() {\n    let blocks = [];\n    for (let b of this.group.children) {\n      blocks.push(b);\n    }\n    this.group.updateMatrix();\n    let matrix = this.group.matrix.clone();\n    this.object.remove(this.group);\n    for (let block of blocks) {\n      this.object.add(block);\n      block.applyMatrix(matrix);\n    }\n    this.turning = false;\n    this.game.state = 0;\n  }\n  public rotate(axis: number, clockwise: boolean) {\n    if (this.turning || this.game.state !== 0) return;\n    this.game.state = 1;\n    this.group = new p.Object3D();\n    this.object.add(this.group);\n    this.raxis = axis;\n    this.turning = true;\n    this.cur = 0;\n    this.clockwise = clockwise;\n    this.finalize_rotate(axis, clockwise);\n  }\n  public finalize_rotate(axis: number, clockwise: boolean) {\n    let n = this.n;\n    for (let i = 0; i < n; i++) {\n      let face = this.getface(axis, i);\n      if (this.turning) for (let blocks of face) for (let b of blocks) this.group.add(b.getblock());\n      this.putface(axis, i, this.rotateface(face, clockwise));\n    }\n  }\n  public turn(axis: number, index: number, clockwise: boolean) {\n    if (this.turning || this.game.state !== 0 || index >= this.n) return;\n    this.game.state = 1;\n    this.group = new p.Object3D();\n    this.object.add(this.group);\n    this.raxis = axis;\n    this.turning = true;\n    this.cur = 0;\n    this.clockwise = clockwise;\n    this.finalize_turn(axis, index, clockwise);\n  }\n  public finalize_turn(axis: number, i: number, clockwise: boolean) {\n    let face = this.getface(axis, i);\n    if (this.turning) for (let blocks of face) for (let b of blocks) this.group.add(b.getblock());\n    this.putface(axis, i, this.rotateface(face, clockwise));\n  }\n  public scramble_cube(moves: number) {\n    if (this.game.state !== 0 || this.turning || this.scramble) return;\n    this.moves = moves;\n    this.scramble = true;\n    let fmove = this.getrandommove();\n    this.turn(fmove[0], fmove[1], fmove[2]);\n  }\n  private getrandommove(): [number, number, boolean] {\n    return [Math.floor(Math.random() * 3), Math.floor(Math.random() * this.n), Math.random() > 0.5];\n  }\n  private putface(axis: number, i: number, face: Block[][]) {\n    let n = this.n;\n    if (axis === 0) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < n; k++) {\n          this.blocks[i][n - j - 1][n - k - 1] = face[j][k];\n        }\n      }\n    }\n    //y axis\n    else if (axis === 1) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < n; k++) {\n          this.blocks[k][i][j] = face[j][k];\n        }\n      }\n    }\n    //z axis\n    else {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < n; k++) {\n          this.blocks[k][n - j - 1][i] = face[j][k];\n        }\n      }\n    }\n  }\n  private getface(axis: number, i: number) {\n    let n = this.n;\n    let res: Block[][] = new Array(n);\n    //x axs\n    if (axis === 0) {\n      for (let j = 0; j < n; j++) {\n        res[j] = new Array(n);\n        for (let k = 0; k < n; k++) {\n          res[j][k] = this.blocks[i][n - j - 1][n - k - 1];\n        }\n      }\n    }\n    //y axis\n    else if (axis === 1) {\n      for (let j = 0; j < n; j++) {\n        res[j] = new Array(n);\n        for (let k = 0; k < n; k++) {\n          res[j][k] = this.blocks[k][i][j];\n        }\n      }\n    }\n    //z axis\n    else {\n      for (let j = 0; j < n; j++) {\n        res[j] = new Array(n);\n        for (let k = 0; k < n; k++) {\n          res[j][k] = this.blocks[k][n - j - 1][i];\n        }\n      }\n    }\n    return res;\n  }\n  private rotateface(face: Block[][], clockwise: boolean) {\n    let n = this.n;\n    if (clockwise)\n      for (let i = 0; i < n / 2; i++) {\n        for (let j = i; j < n - i - 1; j++) {\n          // store lt in temp variable\n          let temp = face[i][j];\n          // move values from left to top\n          face[i][j] = face[n - 1 - j][i];\n          // move values from bottom to left\n          face[n - 1 - j][i] = face[n - 1 - i][n - 1 - j];\n          // move values from right to bottom\n          face[n - 1 - i][n - 1 - j] = face[j][n - 1 - i];\n          // assign temp to right\n          face[j][n - 1 - i] = temp;\n        }\n      }\n    else\n      for (let i = 0; i < n / 2; i++) {\n        for (let j = i; j < n - i - 1; j++) {\n          // store current cell in temp variable\n          let temp = face[i][j];\n          // move values from right to top\n          face[i][j] = face[j][n - 1 - i];\n          // move values from bottom to right\n          face[j][n - 1 - i] = face[n - 1 - i][n - 1 - j];\n          // move values from left to bottom\n          face[n - 1 - i][n - 1 - j] = face[n - 1 - j][i];\n          // assign temp to left\n          face[n - 1 - j][i] = temp;\n        }\n      }\n    return face;\n  }\n  public clean() {\n    for (let w of this.blocks) {\n      for (let l of w) {\n        for (let b of l) {\n          b.clean();\n          this.object.remove(b.getblock());\n        }\n      }\n    }\n  }\n}\n","import Game from './game';\nimport {\n  Vector2,\n  Vector3,\n  Raycaster,\n  Object3D,\n  Mesh,\n  BoxBufferGeometry,\n  PlaneBufferGeometry,\n  Intersection,\n  Matrix4,\n  MeshBasicMaterial,\n} from 'three';\nimport Block from './block';\nconst still = -1;\nconst prep = 0;\nconst moving = 1;\nconst finalize = 2;\nconst invisibleMaterial = new MeshBasicMaterial({\n  depthWrite: false,\n  transparent: true,\n  opacity: 0,\n  color: 0x000000,\n});\nexport default class Control {\n  //Basic Control Parameter\n  private game: Game;\n  private state: number = still;\n  private group = new Object3D();\n  private raycaster = new Raycaster();\n  private surface = new Mesh(new PlaneBufferGeometry(15, 15), invisibleMaterial.clone());\n  private perimeter = new Mesh(new BoxBufferGeometry(1, 1, 1), invisibleMaterial.clone());\n  private xoffset = 0;\n  private yoffset = 0;\n  //InitDragParameter\n  private touch = false;\n  private blockarray: Mesh[] = [];\n  private piece!: Mesh;\n  private layer = false;\n  private position = new Vector2();\n  private dragcurrent = new Vector3();\n  private dragdelta = new Vector3();\n  private dragtotal = new Vector3();\n  private momentum: { delta: Vector3; time: number }[] = [];\n  //Moving parameter\n  private flipaxis = new Vector3();\n  private flipangle = 0;\n  private dragdirection = 0;\n  private rotateaxis: number = 0;\n  private dragnormal = new Vector3();\n  private segment = 0;\n  private count = 0;\n  private fliplayer: Object3D[] = [];\n  /**\n   * Create the control frame work\n   * @param game\n   */\n  public constructor(game: Game) {\n    this.game = game;\n    this.game.scene.add(this.surface);\n    this.game.scene.add(this.perimeter);\n    this.game.cube.object.add(this.group);\n    this.getarr(this.game.cube.blocks);\n  }\n  public start = (e: MouseEvent | TouchEvent) => {\n    if (this.game.state !== 0 || this.state !== still) return;\n    if (e instanceof TouchEvent) e.preventDefault();\n    this.getposition(e);\n    this.touch = e.type === 'touchstart';\n    this.initdrag(this.position);\n    this.game.canvas.addEventListener(this.touch ? 'touchend' : 'mouseup', this.end, false);\n    this.game.canvas.addEventListener(this.touch ? 'touchmove' : 'mousemove', this.move, false);\n  };\n  /**\n   * initialize the Drag step. This function will initialize the parameter for later use in move stage.\n   * The parameter include setting up the clicked pieces and getting the surface\n   * Some vector like the drag current and drag total is also intialize or reseted here\n   * @param position\n   */\n  private initdrag(position: Vector2) {\n    let intersection = this.getintersect(position, this.perimeter);\n    if (intersection) {\n      if (intersection.face == null) return;\n      this.dragnormal = intersection.face.normal.round();\n      this.layer = true; //rotate only one layer\n      this.attach(this.surface, this.perimeter);\n      this.surface.rotation.set(0, 0, 0);\n      this.surface.position.set(0, 0, 0);\n      this.surface.lookAt(this.dragnormal);\n      this.surface.translateZ(0.5);\n      this.surface.updateMatrixWorld();\n      this.detach(this.surface, this.perimeter);\n      let piece = this.getpiece(position, this.blockarray);\n      if (piece === false) return;\n      this.piece = piece.object.userData.parent;\n    } else {\n      this.layer = false; //rotate whole cube\n      this.group.rotation.set(0, 0, 0);\n      this.surface.position.set(0, 0, 0);\n      this.surface.rotation.set(0, Math.PI / 4, 0);\n      this.surface.updateMatrixWorld();\n    }\n    let surfaceintersect = this.getintersect(position, this.surface);\n    if (surfaceintersect === false) return;\n    this.dragcurrent = this.surface.worldToLocal(surfaceintersect.point);\n    this.dragtotal = new Vector3(0, 0, 0);\n    this.game.state = 2; // 2 stands for using the touch to move\n    this.state = prep;\n    this.momentum = [];\n  }\n  public move = (e: TouchEvent | MouseEvent) => {\n    if (e instanceof TouchEvent) e.preventDefault();\n    this.getposition(e);\n    this.onDragMove(this.position);\n  };\n  private onDragMove(position: Vector2) {\n    if (this.state !== prep && this.state !== moving) return;\n    let surfaceintersect = this.getintersect(position, this.surface);\n    if (surfaceintersect === false) return;\n    const point = this.surface.worldToLocal(surfaceintersect.point.clone());\n    this.dragdelta = point\n      .clone()\n      .sub(this.dragcurrent)\n      .setZ(0);\n    this.dragcurrent = point;\n    this.addmomentumpoint(this.dragdelta);\n    this.dragtotal.add(this.dragdelta);\n    if (this.state === prep && this.dragtotal.length() > 0.05) {\n      this.dragdirection = this.getmainaxis(this.dragtotal);\n      if (this.layer) {\n        const direction = new Vector3();\n        direction.setComponent(this.dragdirection, 1);\n        const worlddirection = this.surface.localToWorld(direction).sub(this.surface.position);\n        const objectdirection = this.perimeter.worldToLocal(worlddirection).round();\n        this.flipaxis = objectdirection.cross(this.dragnormal).negate();\n        this.getlayer();\n        this.selectlayer();\n      } else {\n        let axis =\n          this.dragdirection !== 0\n            ? this.dragdirection === 1 && position.x > this.game.width / 2\n              ? 2\n              : 0\n            : 1;\n        this.flipaxis = new Vector3();\n        this.flipaxis.setComponent(axis, axis === 0 ? -1 : 1);\n        this.blockarray.forEach(b => {\n          if (b !== null && b.parent !== null) this.group.add(b.parent);\n        });\n        this.rotateaxis = axis;\n      }\n      this.flipangle = 0;\n      this.state = moving;\n    } else if (this.state === moving) {\n      const rotation = this.dragdelta.getComponent(this.dragdirection);\n      this.group.rotateOnAxis(this.flipaxis, rotation);\n      this.flipangle += rotation;\n    }\n  }\n\n  public end = (e: MouseEvent | TouchEvent) => {\n    if (e instanceof TouchEvent) e.preventDefault();\n    this.getposition(e);\n    this.onDragEnd();\n    this.game.canvas.removeEventListener(this.touch ? 'touchmove' : 'mousemove', this.move, false);\n    this.game.canvas.removeEventListener(this.touch ? 'touchend' : 'mouseup', this.end, false);\n  };\n  private onDragEnd = () => {\n    if (this.state !== moving) {\n      this.game.state = 0;\n      this.state = still;\n      return;\n    }\n    const momentum = this.getmomentum().getComponent(this.dragdirection);\n    const flip = Math.abs(this.flipangle) < Math.PI / 2 && Math.abs(momentum) > 0.05 && this.flipangle !== 0;\n    const angle = flip\n      ? this.roundAngle(this.flipangle + Math.sign(this.flipangle) * (Math.PI / 4))\n      : this.roundAngle(this.flipangle);\n    let delta = angle - this.flipangle;\n    this.segment = delta / 30;\n    if (flip) {\n      let angle = this.flipangle * Math.sign(this.flipaxis.getComponent(this.rotateaxis));\n      if (this.layer) {\n        let ind = Math.round(\n          this.piece.position.getComponent(this.rotateaxis) * this.game.n + (this.game.n - 1) / 2,\n        );\n        let angle = this.flipangle * Math.sign(this.flipaxis.getComponent(this.rotateaxis));\n        this.game.cube.finalize_turn(this.rotateaxis, ind, angle < 0);\n      } else {\n        this.game.cube.finalize_rotate(this.rotateaxis, angle < 0);\n      }\n    }\n    this.count = 0;\n    this.state = finalize;\n    this.game.animations.push(this);\n  };\n  public update() {\n    if (this.state !== finalize) return;\n    this.group.rotateOnAxis(this.flipaxis, this.segment);\n    this.count++;\n    if (this.count === 30) {\n      this.group.rotation.setFromVector3(this.snaprotation(this.group.rotation.toVector3()));\n      if (this.layer) this.deselectlayer();\n      else {\n        this.group.updateMatrix();\n        let matrix = this.group.matrix;\n        this.blockarray.forEach(b => {\n          if (b.parent !== null) {\n            this.group.remove(b.parent);\n            this.game.cube.object.add(b.parent);\n            b.parent.applyMatrix(matrix);\n          }\n        });\n      }\n      this.game.animations.pop();\n      this.state = still;\n      this.game.state = 0;\n      return;\n    }\n  }\n  private getposition(e: MouseEvent | TouchEvent) {\n    if (e instanceof TouchEvent) {\n      const ev = e.touches[0] || e.changedTouches[0];\n      this.position.set(ev.pageX - this.xoffset, ev.pageY - this.yoffset);\n    } else {\n      if (this.xoffset !== undefined) {\n        const ev = e;\n        this.position.set(ev.pageX - this.xoffset, ev.pageY - this.yoffset);\n      }\n    }\n  }\n  private getintersect(position: Vector2, object: Mesh) {\n    this.raycaster.setFromCamera(this.convertposition(position.clone()), this.game.camera);\n    let intersection: Intersection[];\n    intersection = this.raycaster.intersectObject(object);\n    return intersection.length > 0 ? intersection[0] : false;\n  }\n  private getpiece(position: Vector2, objects: Mesh[]) {\n    this.raycaster.setFromCamera(this.convertposition(position.clone()), this.game.camera);\n    let intersection: Intersection[];\n    intersection = this.raycaster.intersectObjects(objects);\n    return intersection.length > 0 ? intersection[0] : false;\n  }\n  private getmainaxis(vector: Vector3) {\n    if (Math.abs(vector.getComponent(0)) > Math.abs(vector.getComponent(1))) {\n      return Math.abs(vector.getComponent(0)) > Math.abs(vector.getComponent(2)) ? 0 : 2;\n    }\n    return Math.abs(vector.getComponent(1)) > Math.abs(vector.getComponent(2)) ? 1 : 2;\n  }\n  private attach(child: Mesh, parent: Mesh) {\n    child.applyMatrix(new Matrix4().getInverse(parent.matrixWorld));\n    this.game.scene.remove(child);\n    parent.add(child);\n  }\n  private detach(child: Mesh, parent: Mesh) {\n    child.applyMatrix(parent.matrixWorld);\n    parent.remove(child);\n    this.game.scene.add(child);\n  }\n  private getlayer() {\n    let layer: Object3D[] = [];\n    let position = this.piece.position\n      .clone()\n      .multiplyScalar(this.game.n * 2)\n      .round();\n    let axis = this.getmainaxis(this.flipaxis);\n    this.blockarray.forEach(block => {\n      if (block !== null && block.parent !== null) {\n        const pos = block.parent.position\n          .clone()\n          .multiplyScalar(this.game.n * 2)\n          .round();\n        if (pos.getComponent(axis) === position.getComponent(axis)) {\n          layer.push(block.parent);\n        }\n      }\n    });\n    this.rotateaxis = axis;\n    this.fliplayer = layer;\n  }\n  private selectlayer() {\n    this.group.rotation.set(0, 0, 0);\n    this.movepiece(this.fliplayer, this.game.cube.object, this.group);\n  }\n  private deselectlayer() {\n    this.movepiece(this.fliplayer, this.group, this.game.cube.object);\n    this.fliplayer = [];\n  }\n  private movepiece(layer: Object3D[], from: Object3D, to: Object3D) {\n    from.updateMatrixWorld();\n    to.updateMatrixWorld();\n    layer.forEach(p => {\n      p.applyMatrix(from.matrixWorld);\n      from.remove(p);\n      p.applyMatrix(new Matrix4().getInverse(to.matrixWorld));\n      to.add(p);\n    });\n  }\n  private getarr(arr: Block[][][]) {\n    let res = [];\n    for (let ar of arr) for (let a of ar) for (let b of a) res.push(b.block);\n    this.blockarray = res;\n  }\n  private convertposition(position: Vector2) {\n    position.x = (position.x / this.game.canvas.width) * 2 - 1;\n    position.y = -((position.y / this.game.canvas.height) * 2 - 1);\n    return position;\n  }\n  private roundAngle(angle: number) {\n    const round = Math.PI / 2;\n    return Math.sign(angle) * Math.round(Math.abs(angle) / round) * round;\n  }\n  private snaprotation(angle: Vector3) {\n    return angle.set(this.roundAngle(angle.x), this.roundAngle(angle.y), this.roundAngle(angle.z));\n  }\n  private addmomentumpoint(delta: Vector3) {\n    let time = Date.now();\n    this.momentum = this.momentum.filter(\n      (moment: { delta: Vector3; time: number }) => time - moment.time < 500,\n    );\n    this.momentum.push({ delta, time });\n  }\n  private getmomentum() {\n    const points = this.momentum.length;\n    const momentum = new Vector3();\n    let t = Date.now();\n    this.momentum = this.momentum.filter((moment: { delta: Vector3; time: number }) => t - moment.time < 500);\n    this.momentum.forEach((value, index: number) => {\n      let pt = value.delta.multiplyScalar(index / points);\n      momentum.add(pt);\n    });\n    return momentum;\n  }\n  public updateoffset(x: number, y: number) {\n    this.xoffset = x;\n    this.yoffset = y;\n  }\n  public reset() {\n    this.getarr(this.game.cube.blocks);\n    this.game.cube.object.add(this.group);\n  }\n}\n","import Cube from './cube';\nimport Control from './control';\nimport {\n  Vector3,\n  Scene,\n  WebGLRenderer,\n  PerspectiveCamera,\n  Object3D,\n  AmbientLight,\n  DirectionalLight,\n} from 'three';\nconst still = 0;\nexport default class Game {\n  //Element to render the game\n  public control: Control;\n  public n: number;\n  private frameId = -1;\n  public renderer: WebGLRenderer;\n  public camera: PerspectiveCamera = new PerspectiveCamera(10, 1, 0.1, 10000);\n  public width: number = 500;\n  public height: number = 500;\n  public cube: Cube;\n  public scene: Scene;\n  public canvas!: HTMLCanvasElement; //will be initalized in initcanvas\n  public animations: (Cube | Control)[] = []; //element list to update\n  //A map for remembering the key and the coresponding commands\n  private arrowkey = new Map();\n  private key = new Map();\n  //State for checking if move is ongoing\n  public state: number = still;\n  //stat.js componenet\n  //constructor to initalize component\n  public constructor(n: number, width: number) {\n    this.n = n;\n    this.scene = new Scene();\n    this.renderer = new WebGLRenderer({ antialias: true });\n    this.cube = new Cube(this, this.n);\n    this.control = new Control(this);\n    this.initcanvas(width);\n    this.initcube();\n    this.createLight();\n    this.initkeys();\n    this.initcontrol();\n    this.start();\n  }\n  public start() {\n    requestAnimationFrame(this.animate);\n  }\n  \n  public stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n  \n  public shuffle(){\n    this.cube.scramble_cube(this.n * this.n + 20);\n  }\n  \n  private animate() {\n    for (let animation of this.animations) animation.update();\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  private keypress = (ev: KeyboardEvent) => {\n    ev.preventDefault();\n    if (this.arrowkey.has(ev.code)) {\n      let op = this.arrowkey.get(ev.code);\n      this.cube.rotate(op[0], op[1]);\n    } else if (this.key.has(ev.code)) {\n      let i = this.key.get(ev.code);\n      let ax = i < 6 ? 0 : i < 12 ? 1 : 2;\n      this.cube.turn(ax, i % 6, !ev.shiftKey);\n    } else if (ev.code === 'Space')this.shuffle();\n  };\n  private initcanvas(width: number) {\n    //make function into variable to pass down\n    this.animate = this.animate.bind(this);\n    this.animations = [];\n    this.width = width < 500 ? 300 : 500;\n    this.height = this.width;\n    //initalize renderer and scene\n    this.renderer.setClearColor('#ffffff');\n    this.renderer.setSize(this.width, this.height);\n    this.frameId = -1;\n    //change camera setup\n    this.camera.position.set(3, 3, 3);\n    this.camera.fov = 20;\n    this.camera.updateProjectionMatrix();\n    this.camera.lookAt(new Vector3(0, 0, 0));\n    //canvas\n    let canvas = this.renderer.domElement;\n    this.canvas = canvas;\n    canvas.tabIndex = 1;\n  }\n  private initcontrol() {\n    this.canvas.addEventListener('keydown', this.keypress);\n    this.canvas.addEventListener('mousedown', this.control.start);\n    this.canvas.addEventListener('touchstart', this.control.start);\n  }\n  private createLight() {\n    let lights = {\n      holder: new Object3D(),\n      ambient: new AmbientLight(0xffffff, 0.75),\n      front: new DirectionalLight(0xffffff, 0.38),\n      back: new DirectionalLight(0xffffff, 0.2),\n    };\n    lights.front.position.set(1, 3, 3);\n    lights.back.position.set(-1, -3, -3);\n    lights.holder.add(lights.ambient);\n    lights.holder.add(lights.front);\n    lights.holder.add(lights.back);\n    this.scene.add(lights.holder);\n  }\n  private initkeys() {\n    let frow = 'QWERTY';\n    let srow = 'ASDFGH';\n    let trow = 'ZXCVBN';\n    this.arrowkey.set('ArrowUp', [0, true]);\n    this.arrowkey.set('ArrowDown', [0, false]);\n    this.arrowkey.set('ArrowLeft', [1, true]);\n    this.arrowkey.set('ArrowRight', [1, false]);\n    for (let i = 0; i < 6; i++) this.key.set(`Key${frow.charAt(i)}`, i);\n    for (let i = 0; i < 6; i++) this.key.set(`Key${srow.charAt(i)}`, 6 + i);\n    for (let i = 0; i < 6; i++) this.key.set(`Key${trow.charAt(i)}`, 12 + i);\n  }\n  private initcube() {\n    this.scene.add(this.cube.getcube());\n    this.animations.push(this.cube);\n  }\n  private renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n  public updateoffset(x: number, y: number) {\n    this.control.updateoffset(x, y);\n  }\n  public reset(n: number) {\n    //Initialize First Cube\n    this.n = n;\n    this.animations=[];\n    this.scene.remove(this.cube.getcube());\n    this.cube.clean();\n    this.cube = new Cube(this, n);\n    this.scene.add(this.cube.getcube());\n    this.state = still;\n    this.animations.push(this.cube);\n    this.control.reset();\n  }\n\n}\n","import React, { Component, createRef } from 'react';\nimport Game from '../lib/game';\nexport class ThreeWrapper extends Component<{ game: Game }, {}> {\n  private mount: React.RefObject<HTMLDivElement>;\n  public constructor(props: any) {\n    super(props);\n    this.mount = createRef<HTMLDivElement>();\n  }\n  public componentDidMount() {\n    this.props.game.start();\n    window.addEventListener('resize', () => {\n      this.updateoffset();\n    });\n    if (this.mount.current !== null) {\n      this.mount.current.appendChild(this.props.game.renderer.domElement);\n      this.props.game.updateoffset(this.mount.current.offsetLeft, this.mount.current.offsetTop);\n    }\n  }\n  private updateoffset() {\n    if (this.mount.current !== null) {\n      this.props.game.updateoffset(this.mount.current.offsetLeft, this.mount.current.offsetTop);\n    }\n  }\n  public componentWillUnmount() {\n    this.props.game.stop();\n  }\n  public render() {\n    return (\n      <div\n        style={{ width: this.props.game.width, height: this.props.game.width, position: 'relative' }}\n        ref={this.mount}\n      />\n    );\n  }\n}\nexport default ThreeWrapper;\n","import React from 'react';\nimport './App.css';\nimport Game from './lib/game'\nimport ThreeWrapper from './components/ThreeWrapper';\n\nfunction App() {\n  let game = new Game(4, window.innerWidth);\n  return (\n    <div className=\"App\" >\n      <h1 className=\"App-header\">Rubik's Cube Demo</h1>\n      <div className=\"link-panel\">\n        <a className=\"link\" href=\"https://shuby-mao.web.app/\">Home</a>\n        <a className=\"link\" href=\"https://shuby-mao.web.app/\">Project Page</a>\n        <a className=\"link\" href=\"https://github.com/shubymao/rubiks-cube-web\">Github Repo</a>\n      </div>\n      <ThreeWrapper game={game}/>\n      <div className=\"panel\">\n        <button onClick={()=>game.reset(1)}>1x1</button>\n        <button onClick={()=>game.reset(2)}>2x2</button>\n        <button onClick={()=>game.reset(3)}>3x3</button>\n        <button onClick={()=>game.reset(4)}>4x4</button>\n        <button onClick={()=>game.reset(5)}>5x5</button>\n        <button onClick={()=>game.shuffle()}>Shuffle</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}